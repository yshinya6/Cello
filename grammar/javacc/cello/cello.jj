options {
  JDK_VERSION = "1.8";
}

PARSER_BEGIN(CelloParser)

import java.io.*;

/**
 * Grammar to parse Cello language
 * @author Shun Kubota, Shinya Yamaguchi
 */
public class CelloParser
{
   public CelloParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    if (args.length != 1) {
      System.err.println("This is a JavaCC parser for Cello");
      System.err.println("Usage: <Input>");
      System.exit(1);
    }
    parse(args[0]);
  }

  public static void parse(String filePath) {
    CelloParser parser;
    long fastest = 0;
    for (int i = 0; i < 5; i++) {
      try {
        parser = new CelloParser(new java.io.FileInputStream(filePath));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("File " + filePath + " not found.");
        return;
      }
      try {
        long start = System.nanoTime();
        parser.File();
        long end = System.nanoTime();
        if ((end - start) < fastest || fastest == 0) {
          fastest = (end - start);
        }
      } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println(String.format("%s ERROR", filePath));
        System.exit(1);
      }
    }
    double result = fastest/1000000.0;
    System.out.println(String.format("%s %s", filePath, result));
  }
}

PARSER_END(CelloParser)


// Lexer Rule
/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < GT: ">" >
| < BANG: "!" >
| < HOOK: "?" >
| < EQ: "==" >
| < NE: "!=" >
| < LE: "<=" >
| < GE: ">=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < ELLIPSIS: "..." >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < BOOLEAN: "boolean" >
| < ELSE: "else" >
| < FOR: "for" >
| < FALSE: "false" >
| < IF: "if" >
|< IF0: "if0">
|< IF1: "if1">
|< IF2: "if2">
|< IF3: "if3">
|< IF4: "if4">
|< IF5: "if5">
|< IF6: "if6">
|< IF7: "if7">
|< IF8: "if8">
|< IF9: "if9">
|< IFA: "ifA">
|< IFB: "ifB">
| < IMPORT: "import" >
| < INT: "int" >
| < LONG: "long" >
| < NULL: "null" >
| < RETURN: "return" >
| < TRUE: "true" >
| < DUMMY1: "dummy1">
| < DUMMY2: "dummy2">
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
         <DECIMAL_LITERAL> (["l","L"])?
        |<ZERO> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #ZERO: "0">
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < NAME: <LETTER> (<PART_LETTER>)* >
| < #LETTER:
      [  "$","A"-"Z","_","a"-"z"]
  >
|
  < #PART_LETTER:
      [
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

/* TYPE */
void Type():
{}
{
 PrimitiveType()
 |
 ReferenceType()
}

void PrimitiveType():
{}
{
 "int"
 |"boolean"
 |"long"
}

void ReferenceType():
{}
{
 <NAME>
}

// Parsing Rule
void File():
{}
{
 (ImportDeclaration())* (TopLevel())+
}

void ImportDeclaration():
{}
{
 "import" <NAME> ("." <NAME>)*
}

void TopLevel():
{}
{
 Declaration()
}

/*declaration*/
void Declaration():
{}
{
  LOOKAHEAD(3)
      MethodDeclaration()
    | VariableDeclaration()
    | Dummy1()
    | Dummy2()
}

void MethodDeclaration():
{}
{
 LOOKAHEAD(2)
 (Type() <NAME> "(" (MethodParamList())? ")" (Block() | ";"))
 |
  Type() Block()
}

void MethodParamList():
{}
{
 MethodParam() ("," MethodParam())*
}

void MethodParam():
{}
{
  Type() (<NAME>)?
}

void VariableDeclaration():
{}
{
 Type() VariableList() ";"
}

void VariableList():
{}
{
 InitDecl() (","InitDecl())*
}

void InitDecl():
{}
{
 <NAME> ("=" AssignmentExpression())?
}

void Dummy1():
{}
{
  "dummy1" VariableList() ";"
}

void Dummy2():
{}
{
  "dummy2" VariableList() ";"
}

/*block,statement*/
void Block():
{}
{
  "{" (LOOKAHEAD(2)
        Statement()
      | Declaration())* "}"
}

void Statement():
{}
{
  Block()
  | "if" "(" Expression() ")" Block() ("else" Block())?
  | "if0" "(" Expression() ")" Block() ("else" Block())?
  | "if1" "(" Expression() ")" Block() ("else" Block())?
  | "if2" "(" Expression() ")" Block() ("else" Block())?
  | "if3" "(" Expression() ")" Block() ("else" Block())?
  | "if4" "(" Expression() ")" Block() ("else" Block())?
  | "if5" "(" Expression() ")" Block() ("else" Block())?
  | "if6" "(" Expression() ")" Block() ("else" Block())?
  | "if7" "(" Expression() ")" Block() ("else" Block())?
  | "if8" "(" Expression() ")" Block() ("else" Block())?
  | "if9" "(" Expression() ")" Block() ("else" Block())?
  | "ifA" "(" Expression() ")" Block() ("else" Block())?
  | "ifB" "(" Expression() ")" Block() ("else" Block())?
  | "return" (Expression())? ";"
  | Expression() ";"
  | ";"
}


/*expression*/
void Expression():
{}
{
 AssignmentExpression() ("," AssignmentExpression())*
}

void AssignmentExpression():
{}
{
    ConditionalExpression()
  [ LOOKAHEAD(2) ("="|"*="|"/="|"%="|"+="|"-="|"<<="|">>="|">>>="|"&="|"^="|"|=") AssignmentExpression() ]

}

void ConditionalExpression():
{}
{
 EqualityExpression() (("||"|"&&") EqualityExpression())*
}

void EqualityExpression():
{}
{
 RelationalExpression() (("=="|"!=") RelationalExpression())*
}

void RelationalExpression():
{}
{
 UnaryExpression() (("<"|"<="|">"|">=") UnaryExpression())*
}

void UnaryExpression():
{}
{
 PostfixExpression()
 |"!" UnaryExpression()
}

void PostfixExpression():
{}
{
 PrimaryExpression() ( LOOKAHEAD(2) FunctionCall())*
}

void FunctionCall():
{}
{
 "(" [ArgumentExpressionList()] ")"
}

void ArgumentExpressionList():
{}
{
 AssignmentExpression() ("," AssignmentExpression())*

}

void PrimaryExpression():
{}
{
  Constant()
 | "(" Expression() ")"
 | ExpressionName()
 //| (LOOKAHEAD(2) ExpressionName()
 //| FunctionExpression()
 //)
}

void FunctionExpression():
{}
{
  Type() (<NAME>)? "(" (MethodParamList())? ")" Block()
}

void Constant():
{}
{
  IntegerLiteral()
 |BooleanLiteral()
 |StringLiteral()
 |NullLiteral()
}

void ExpressionName():
{}
{
  <NAME>
}


void IntegerLiteral():
{}
{
  <INTEGER_LITERAL>
}

void BooleanLiteral():
{}
{
   "true"
  |"false"
}

void StringLiteral():
{}
{
  <STRING_LITERAL>
}

void NullLiteral():
{}
{
  "null"
}
